{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///home/perfect/Documents/GitHub/movies-weather-frontend/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: 'credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        // Here you would typically make an API call to your backend\n        // to verify the credentials and get user data\n        try {\n          const response = await fetch(\n            `${process.env.NEXT_PUBLIC_API_URL}/auth/login`,\n            {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                email: credentials.email,\n                password: credentials.password,\n              }),\n            }\n          );\n\n          if (!response.ok) {\n            return null;\n          }\n\n          const user = await response.json();\n\n          if (user) {\n            return {\n              id: user.id,\n              email: user.email,\n              name: user.name,\n            };\n          }\n        } catch (error) {\n          console.error('Authentication error:', error);\n        }\n\n        return null;\n      },\n    }),\n  ],\n  session: {\n    strategy: 'jwt',\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id as string;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: '/auth/signin',\n  },\n};\n"],"names":[],"mappings":";;;;AACA;;AAEO,MAAM,cAA+B;IAC1C,WAAW;QACT,IAAA,qKAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,4DAA4D;gBAC5D,8CAA8C;gBAC9C,IAAI;oBACF,MAAM,WAAW,MAAM,MACrB,GAAG,QAAQ,GAAG,CAAC,mBAAmB,CAAC,WAAW,CAAC,EAC/C;wBACE,QAAQ;wBACR,SAAS;4BACP,gBAAgB;wBAClB;wBACA,MAAM,KAAK,SAAS,CAAC;4BACnB,OAAO,YAAY,KAAK;4BACxB,UAAU,YAAY,QAAQ;wBAChC;oBACF;oBAGF,IAAI,CAAC,SAAS,EAAE,EAAE;wBAChB,OAAO;oBACT;oBAEA,MAAM,OAAO,MAAM,SAAS,IAAI;oBAEhC,IAAI,MAAM;wBACR,OAAO;4BACL,IAAI,KAAK,EAAE;4BACX,OAAO,KAAK,KAAK;4BACjB,MAAM,KAAK,IAAI;wBACjB;oBACF;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,yBAAyB;gBACzC;gBAEA,OAAO;YACT;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;AACF","debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///home/perfect/Documents/GitHub/movies-weather-frontend/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth';\nimport { authOptions } from '@/lib/auth';\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC,mIAAW","debugId":null}}]
}