module.exports = [
"[project]/node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "default",
    ()=>isPropValid
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$memoize$2f$dist$2f$emotion$2d$memoize$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@emotion/memoize/dist/emotion-memoize.esm.js [app-ssr] (ecmascript)");
;
// eslint-disable-next-line no-undef
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|popover|popoverTarget|popoverTargetAction|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23
var isPropValid = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$memoize$2f$dist$2f$emotion$2d$memoize$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
});
;
}),
"[project]/node_modules/@emotion/react/dist/emotion-element-782f682d.development.esm.js [app-ssr] (ecmascript) <export w as withEmotionCache>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "withEmotionCache",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$react$2f$dist$2f$emotion$2d$element$2d$782f682d$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["w"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$react$2f$dist$2f$emotion$2d$element$2d$782f682d$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@emotion/react/dist/emotion-element-782f682d.development.esm.js [app-ssr] (ecmascript)");
}),
"[project]/node_modules/@emotion/react/dist/emotion-element-782f682d.development.esm.js [app-ssr] (ecmascript) <export T as ThemeContext>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "ThemeContext",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$react$2f$dist$2f$emotion$2d$element$2d$782f682d$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["T"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$react$2f$dist$2f$emotion$2d$element$2d$782f682d$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@emotion/react/dist/emotion-element-782f682d.development.esm.js [app-ssr] (ecmascript)");
}),
"[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js [app-ssr] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

module.exports = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/module.compiled.js [app-ssr] (ecmascript)").vendored['react-ssr'].ReactDOM; //# sourceMappingURL=react-dom.js.map
}),
"[project]/node_modules/@zag-js/react/dist/index.mjs [app-ssr] (ecmascript) <locals>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "Portal",
    ()=>Portal,
    "normalizeProps",
    ()=>normalizeProps,
    "useMachine",
    ()=>useMachine
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
"use client";
;
;
;
;
;
;
;
;
// src/index.ts
var useSafeLayoutEffect = typeof globalThis.document !== "undefined" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useLayoutEffect"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"];
// src/bindable.ts
function useBindable(props) {
    const initial = props().value ?? props().defaultValue;
    const eq = props().isEqual ?? Object.is;
    const [initialValue] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(initial);
    const [value, setValue] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(initialValue);
    const controlled = props().value !== void 0;
    const valueRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(value);
    valueRef.current = controlled ? props().value : value;
    const prevValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(valueRef.current);
    useSafeLayoutEffect(()=>{
        prevValue.current = valueRef.current;
    }, [
        value,
        props().value
    ]);
    const setFn = (value2)=>{
        const prev = prevValue.current;
        const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isFunction"])(value2) ? value2(prev) : value2;
        if (props().debug) {
            console.log(`[bindable > ${props().debug}] setValue`, {
                next,
                prev
            });
        }
        if (!controlled) setValue(next);
        if (!eq(next, prev)) {
            props().onChange?.(next, prev);
        }
    };
    function get() {
        return controlled ? props().value : value;
    }
    return {
        initial: initialValue,
        ref: valueRef,
        get,
        set (value2) {
            const exec = props().sync ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flushSync"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["identity"];
            exec(()=>setFn(value2));
        },
        invoke (nextValue, prevValue2) {
            props().onChange?.(nextValue, prevValue2);
        },
        hash (value2) {
            return props().hash?.(value2) ?? String(value2);
        }
    };
}
useBindable.cleanup = (fn)=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>fn, []);
};
useBindable.ref = (defaultValue)=>{
    const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(defaultValue);
    return {
        get: ()=>value.current,
        set: (next)=>{
            value.current = next;
        }
    };
};
function useRefs(refs) {
    const ref = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(refs);
    return {
        get (key) {
            return ref.current[key];
        },
        set (key, value) {
            ref.current[key] = value;
        }
    };
}
var useTrack = (deps, effect)=>{
    const render = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(false);
    const called = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(false);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        const mounted = render.current;
        const run = mounted && called.current;
        if (run) return effect();
        called.current = true;
    }, [
        ...(deps ?? []).map((d)=>typeof d === "function" ? d() : d)
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        render.current = true;
        return ()=>{
            render.current = false;
        };
    }, []);
};
// src/machine.ts
function useMachine(machine, userProps = {}) {
    const scope = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>{
        const { id, ids, getRootNode } = userProps;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createScope"])({
            id,
            ids,
            getRootNode
        });
    }, [
        userProps
    ]);
    const debug = (...args)=>{
        if (machine.debug) console.log(...args);
    };
    const props = machine.props?.({
        props: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compact"])(userProps),
        scope
    }) ?? userProps;
    const prop = useProp(props);
    const context = machine.context?.({
        prop,
        bindable: useBindable,
        scope,
        flush,
        getContext () {
            return ctx;
        },
        getComputed () {
            return computed;
        },
        getRefs () {
            return refs;
        },
        getEvent () {
            return getEvent();
        }
    });
    const contextRef = useLiveRef(context);
    const ctx = {
        get (key) {
            return contextRef.current?.[key].ref.current;
        },
        set (key, value) {
            contextRef.current?.[key].set(value);
        },
        initial (key) {
            return contextRef.current?.[key].initial;
        },
        hash (key) {
            const current = contextRef.current?.[key].get();
            return contextRef.current?.[key].hash(current);
        }
    };
    const effects = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(/* @__PURE__ */ new Map());
    const transitionRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(null);
    const previousEventRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(null);
    const eventRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])({
        type: ""
    });
    const getEvent = ()=>({
            ...eventRef.current,
            current () {
                return eventRef.current;
            },
            previous () {
                return previousEventRef.current;
            }
        });
    const getState = ()=>({
            ...state,
            matches (...values) {
                return values.includes(state.ref.current);
            },
            hasTag (tag) {
                return !!machine.states[state.ref.current]?.tags?.includes(tag);
            }
        });
    const refs = useRefs(machine.refs?.({
        prop,
        context: ctx
    }) ?? {});
    const getParams = ()=>({
            state: getState(),
            context: ctx,
            event: getEvent(),
            prop,
            send,
            action,
            guard,
            track: useTrack,
            refs,
            computed,
            flush,
            scope,
            choose
        });
    const action = (keys)=>{
        const strs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isFunction"])(keys) ? keys(getParams()) : keys;
        if (!strs) return;
        const fns = strs.map((s)=>{
            const fn = machine.implementations?.actions?.[s];
            if (!fn) (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["warn"])(`[zag-js] No implementation found for action "${JSON.stringify(s)}"`);
            return fn;
        });
        for (const fn of fns){
            fn?.(getParams());
        }
    };
    const guard = (str)=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isFunction"])(str)) return str(getParams());
        return machine.implementations?.guards?.[str](getParams());
    };
    const effect = (keys)=>{
        const strs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isFunction"])(keys) ? keys(getParams()) : keys;
        if (!strs) return;
        const fns = strs.map((s)=>{
            const fn = machine.implementations?.effects?.[s];
            if (!fn) (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["warn"])(`[zag-js] No implementation found for effect "${JSON.stringify(s)}"`);
            return fn;
        });
        const cleanups = [];
        for (const fn of fns){
            const cleanup = fn?.(getParams());
            if (cleanup) cleanups.push(cleanup);
        }
        return ()=>cleanups.forEach((fn)=>fn?.());
    };
    const choose = (transitions)=>{
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toArray"])(transitions).find((t)=>{
            let result = !t.guard;
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isString"])(t.guard)) result = !!guard(t.guard);
            else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isFunction"])(t.guard)) result = t.guard(getParams());
            return result;
        });
    };
    const computed = (key)=>{
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ensure"])(machine.computed, ()=>`[zag-js] No computed object found on machine`);
        const fn = machine.computed[key];
        return fn({
            context: ctx,
            event: getEvent(),
            prop,
            refs,
            scope,
            computed
        });
    };
    const state = useBindable(()=>({
            defaultValue: machine.initialState({
                prop
            }),
            onChange (nextState, prevState) {
                if (prevState) {
                    const exitEffects = effects.current.get(prevState);
                    exitEffects?.();
                    effects.current.delete(prevState);
                }
                if (prevState) {
                    action(machine.states[prevState]?.exit);
                }
                action(transitionRef.current?.actions);
                const cleanup = effect(machine.states[nextState]?.effects);
                if (cleanup) effects.current.set(nextState, cleanup);
                if (prevState === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INIT_STATE"]) {
                    action(machine.entry);
                    const cleanup2 = effect(machine.effects);
                    if (cleanup2) effects.current.set(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INIT_STATE"], cleanup2);
                }
                action(machine.states[nextState]?.entry);
            }
        }));
    const hydratedStateRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(void 0);
    const statusRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MachineStatus"].NotStarted);
    useSafeLayoutEffect(()=>{
        queueMicrotask(()=>{
            const started = statusRef.current === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MachineStatus"].Started;
            statusRef.current = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MachineStatus"].Started;
            debug(started ? "rehydrating..." : "initializing...");
            const initialState = hydratedStateRef.current ?? state.initial;
            state.invoke(initialState, started ? state.get() : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INIT_STATE"]);
        });
        const fns = effects.current;
        const currentState = state.ref.current;
        return ()=>{
            debug("unmounting...");
            hydratedStateRef.current = currentState;
            statusRef.current = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MachineStatus"].Stopped;
            fns.forEach((fn)=>fn?.());
            effects.current = /* @__PURE__ */ new Map();
            transitionRef.current = null;
            queueMicrotask(()=>{
                action(machine.exit);
            });
        };
    }, []);
    const getCurrentState = ()=>{
        if ("ref" in state) return state.ref.current;
        return state.get();
    };
    const send = (event)=>{
        queueMicrotask(()=>{
            if (statusRef.current !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MachineStatus"].Started) return;
            previousEventRef.current = eventRef.current;
            eventRef.current = event;
            let currentState = getCurrentState();
            const transitions = // @ts-ignore
            machine.states[currentState].on?.[event.type] ?? // @ts-ignore
            machine.on?.[event.type];
            const transition = choose(transitions);
            if (!transition) return;
            transitionRef.current = transition;
            const target = transition.target ?? currentState;
            debug("transition", event.type, transition.target || currentState, `(${transition.actions})`);
            const changed = target !== currentState;
            if (changed) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flushSync"])(()=>state.set(target));
            } else if (transition.reenter && !changed) {
                state.invoke(currentState, currentState);
            } else {
                action(transition.actions ?? []);
            }
        });
    };
    machine.watch?.(getParams());
    return {
        state: getState(),
        send,
        context: ctx,
        prop,
        scope,
        refs,
        computed,
        event: getEvent(),
        getStatus: ()=>statusRef.current
    };
}
function useLiveRef(value) {
    const ref = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(value);
    ref.current = value;
    return ref;
}
function useProp(value) {
    const ref = useLiveRef(value);
    return function get(key) {
        return ref.current[key];
    };
}
function flush(fn) {
    queueMicrotask(()=>{
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flushSync"])(()=>fn());
    });
}
var normalizeProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createNormalizer"])((v)=>v);
var Portal = (props)=>{
    const { children, container, disabled, getRootNode } = props;
    const isServer = "undefined" === "undefined";
    if ("TURBOPACK compile-time truthy", 1) return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Fragment"], {
        children
    });
    //TURBOPACK unreachable
    ;
    const doc = undefined;
    const mountNode = undefined;
};
;
}),
"[project]/node_modules/@zag-js/presence/dist/index.mjs [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-ssr] (ecmascript)");
;
;
;
// src/presence.connect.ts
function connect(service, _normalize) {
    const { state, send, context } = service;
    const present = state.matches("mounted", "unmountSuspended");
    return {
        skip: !context.get("initial"),
        present,
        setNode (node) {
            if (!node) return;
            send({
                type: "NODE.SET",
                node
            });
        },
        unmount () {
            send({
                type: "UNMOUNT"
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            ...props2,
            present: !!props2.present
        };
    },
    initialState ({ prop }) {
        return prop("present") ? "mounted" : "unmounted";
    },
    refs () {
        return {
            node: null,
            styles: null
        };
    },
    context ({ bindable }) {
        return {
            unmountAnimationName: bindable(()=>({
                    defaultValue: null
                })),
            prevAnimationName: bindable(()=>({
                    defaultValue: null
                })),
            present: bindable(()=>({
                    defaultValue: false
                })),
            initial: bindable(()=>({
                    sync: true,
                    defaultValue: false
                }))
        };
    },
    exit: [
        "clearInitial",
        "cleanupNode"
    ],
    watch ({ track, prop, send }) {
        track([
            ()=>prop("present")
        ], ()=>{
            send({
                type: "PRESENCE.CHANGED"
            });
        });
    },
    on: {
        "NODE.SET": {
            actions: [
                "setupNode"
            ]
        },
        "PRESENCE.CHANGED": {
            actions: [
                "setInitial",
                "syncPresence"
            ]
        }
    },
    states: {
        mounted: {
            on: {
                UNMOUNT: {
                    target: "unmounted",
                    actions: [
                        "clearPrevAnimationName",
                        "invokeOnExitComplete"
                    ]
                },
                "UNMOUNT.SUSPEND": {
                    target: "unmountSuspended"
                }
            }
        },
        unmountSuspended: {
            effects: [
                "trackAnimationEvents"
            ],
            on: {
                MOUNT: {
                    target: "mounted",
                    actions: [
                        "setPrevAnimationName"
                    ]
                },
                UNMOUNT: {
                    target: "unmounted",
                    actions: [
                        "clearPrevAnimationName",
                        "invokeOnExitComplete"
                    ]
                }
            }
        },
        unmounted: {
            on: {
                MOUNT: {
                    target: "mounted",
                    actions: [
                        "setPrevAnimationName"
                    ]
                }
            }
        }
    },
    implementations: {
        actions: {
            setInitial: ({ context })=>{
                if (context.get("initial")) return;
                queueMicrotask(()=>{
                    context.set("initial", true);
                });
            },
            clearInitial: ({ context })=>{
                context.set("initial", false);
            },
            invokeOnExitComplete: ({ prop })=>{
                prop("onExitComplete")?.();
            },
            setupNode: ({ refs, event })=>{
                if (refs.get("node") === event.node) return;
                refs.set("node", event.node);
                refs.set("styles", (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getComputedStyle"])(event.node));
            },
            cleanupNode: ({ refs })=>{
                refs.set("node", null);
                refs.set("styles", null);
            },
            syncPresence: ({ context, refs, send, prop })=>{
                const presentProp = prop("present");
                if (presentProp) {
                    return send({
                        type: "MOUNT",
                        src: "presence.changed"
                    });
                }
                const node = refs.get("node");
                if (!presentProp && node?.ownerDocument.visibilityState === "hidden") {
                    return send({
                        type: "UNMOUNT",
                        src: "visibilitychange"
                    });
                }
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const animationName = getAnimationName(refs.get("styles"));
                    context.set("unmountAnimationName", animationName);
                    if (animationName === "none" || animationName === context.get("prevAnimationName") || refs.get("styles")?.display === "none" || refs.get("styles")?.animationDuration === "0s") {
                        send({
                            type: "UNMOUNT",
                            src: "presence.changed"
                        });
                    } else {
                        send({
                            type: "UNMOUNT.SUSPEND"
                        });
                    }
                });
            },
            setPrevAnimationName: ({ context, refs })=>{
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    context.set("prevAnimationName", getAnimationName(refs.get("styles")));
                });
            },
            clearPrevAnimationName: ({ context })=>{
                context.set("prevAnimationName", null);
            }
        },
        effects: {
            trackAnimationEvents: ({ context, refs, send })=>{
                const node = refs.get("node");
                if (!node) return;
                const onStart = (event)=>{
                    const target = event.composedPath?.()?.[0] ?? event.target;
                    if (target === node) {
                        context.set("prevAnimationName", getAnimationName(refs.get("styles")));
                    }
                };
                const onEnd = (event)=>{
                    const animationName = getAnimationName(refs.get("styles"));
                    const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
                    if (target === node && animationName === context.get("unmountAnimationName")) {
                        send({
                            type: "UNMOUNT",
                            src: "animationend"
                        });
                    }
                };
                node.addEventListener("animationstart", onStart);
                node.addEventListener("animationcancel", onEnd);
                node.addEventListener("animationend", onEnd);
                const cleanupStyles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setStyle"])(node, {
                    animationFillMode: "forwards"
                });
                return ()=>{
                    node.removeEventListener("animationstart", onStart);
                    node.removeEventListener("animationcancel", onEnd);
                    node.removeEventListener("animationend", onEnd);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nextTick"])(()=>cleanupStyles());
                };
            }
        }
    }
});
function getAnimationName(styles) {
    return styles?.animationName || "none";
}
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createProps"])()([
    "onExitComplete",
    "present",
    "immediate"
]);
;
}),
"[project]/node_modules/@zag-js/auto-resize/dist/index.mjs [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "autoResizeInput",
    ()=>autoResizeInput,
    "autoresizeTextarea",
    ()=>autoresizeTextarea
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-ssr] (ecmascript)");
;
// src/autoresize-input.ts
function getVisualStyles(node) {
    if (!node) return;
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getComputedStyle"])(node);
    return "box-sizing:" + style.boxSizing + ";border-left:" + style.borderLeftWidth + " solid red;border-right:" + style.borderRightWidth + " solid red;font-family:" + style.fontFamily + ";font-feature-settings:" + style.fontFeatureSettings + ";font-kerning:" + style.fontKerning + ";font-size:" + style.fontSize + ";font-stretch:" + style.fontStretch + ";font-style:" + style.fontStyle + ";font-variant:" + style.fontVariant + ";font-variant-caps:" + style.fontVariantCaps + ";font-variant-ligatures:" + style.fontVariantLigatures + ";font-variant-numeric:" + style.fontVariantNumeric + ";font-weight:" + style.fontWeight + ";letter-spacing:" + style.letterSpacing + ";margin-left:" + style.marginLeft + ";margin-right:" + style.marginRight + ";padding-left:" + style.paddingLeft + ";padding-right:" + style.paddingRight + ";text-indent:" + style.textIndent + ";text-transform:" + style.textTransform;
}
// src/autoresize-input.ts
function createGhostElement(doc) {
    var el = doc.createElement("div");
    el.id = "ghost";
    el.style.cssText = "display:inline-block;height:0;overflow:hidden;position:absolute;top:0;visibility:hidden;white-space:nowrap;";
    doc.body.appendChild(el);
    return el;
}
function autoResizeInput(input) {
    if (!input) return;
    const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"])(input);
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getWindow"])(input);
    const ghost = createGhostElement(doc);
    const cssText = getVisualStyles(input);
    if (cssText) ghost.style.cssText += cssText;
    function resize() {
        win.requestAnimationFrame(()=>{
            ghost.innerHTML = input.value;
            const rect = win.getComputedStyle(ghost);
            input?.style.setProperty("width", rect.width);
        });
    }
    resize();
    input?.addEventListener("input", resize);
    input?.addEventListener("change", resize);
    return ()=>{
        doc.body.removeChild(ghost);
        input?.removeEventListener("input", resize);
        input?.removeEventListener("change", resize);
    };
}
var autoresizeTextarea = (el)=>{
    if (!el) return;
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getComputedStyle"])(el);
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getWindow"])(el);
    const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"])(el);
    const resize = ()=>{
        requestAnimationFrame(()=>{
            el.style.height = "auto";
            let newHeight;
            if (style.boxSizing === "content-box") {
                newHeight = el.scrollHeight - (parseFloat(style.paddingTop) + parseFloat(style.paddingBottom));
            } else {
                newHeight = el.scrollHeight + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
            }
            if (style.maxHeight !== "none" && newHeight > parseFloat(style.maxHeight)) {
                if (style.overflowY === "hidden") {
                    el.style.overflowY = "scroll";
                }
                newHeight = parseFloat(style.maxHeight);
            } else if (style.overflowY !== "hidden") {
                el.style.overflowY = "hidden";
            }
            el.style.height = `${newHeight}px`;
        });
    };
    el.addEventListener("input", resize);
    el.form?.addEventListener("reset", resize);
    const elementPrototype = Object.getPrototypeOf(el);
    const descriptor = Object.getOwnPropertyDescriptor(elementPrototype, "value");
    Object.defineProperty(el, "value", {
        ...descriptor,
        set () {
            descriptor?.set?.apply(this, arguments);
            resize();
        }
    });
    const resizeObserver = new win.ResizeObserver(()=>{
        requestAnimationFrame(()=>resize());
    });
    resizeObserver.observe(el);
    const attrObserver = new win.MutationObserver(()=>resize());
    attrObserver.observe(el, {
        attributes: true,
        attributeFilter: [
            "rows",
            "placeholder"
        ]
    });
    doc.fonts?.addEventListener("loadingdone", resize);
    return ()=>{
        el.removeEventListener("input", resize);
        el.form?.removeEventListener("reset", resize);
        doc.fonts?.removeEventListener("loadingdone", resize);
        resizeObserver.disconnect();
        attrObserver.disconnect();
    };
};
;
}),
"[project]/node_modules/@zag-js/pagination/dist/index.mjs [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "ellipsisProps",
    ()=>ellipsisProps,
    "itemProps",
    ()=>itemProps,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitEllipsisProps",
    ()=>splitEllipsisProps,
    "splitItemProps",
    ()=>splitItemProps,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-ssr] (ecmascript)");
;
;
;
;
;
// src/pagination.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createAnatomy"])("pagination").parts("root", "item", "ellipsis", "prevTrigger", "nextTrigger");
var parts = anatomy.build();
// src/pagination.dom.ts
var getRootId = (ctx)=>ctx.ids?.root ?? `pagination:${ctx.id}`;
var getPrevTriggerId = (ctx)=>ctx.ids?.prevTrigger ?? `pagination:${ctx.id}:prev`;
var getNextTriggerId = (ctx)=>ctx.ids?.nextTrigger ?? `pagination:${ctx.id}:next`;
var getEllipsisId = (ctx, index)=>ctx.ids?.ellipsis?.(index) ?? `pagination:${ctx.id}:ellipsis:${index}`;
var getItemId = (ctx, page)=>ctx.ids?.item?.(page) ?? `pagination:${ctx.id}:item:${page}`;
// src/pagination.utils.ts
var range = (start, end)=>{
    let length = end - start + 1;
    return Array.from({
        length
    }, (_, idx)=>idx + start);
};
var transform = (items)=>{
    return items.map((value)=>{
        if (typeof value === "number") return {
            type: "page",
            value
        };
        return {
            type: "ellipsis"
        };
    });
};
var ELLIPSIS = "ellipsis";
var getRange = (ctx)=>{
    const { page, totalPages, siblingCount } = ctx;
    const totalPageNumbers = Math.min(2 * siblingCount + 5, totalPages);
    const firstPageIndex = 1;
    const lastPageIndex = totalPages;
    const leftSiblingIndex = Math.max(page - siblingCount, firstPageIndex);
    const rightSiblingIndex = Math.min(page + siblingCount, lastPageIndex);
    const showLeftEllipsis = leftSiblingIndex > firstPageIndex + 1;
    const showRightEllipsis = rightSiblingIndex < lastPageIndex - 1;
    const itemCount = totalPageNumbers - 2;
    if (!showLeftEllipsis && showRightEllipsis) {
        const leftRange = range(1, itemCount);
        return [
            ...leftRange,
            ELLIPSIS,
            lastPageIndex
        ];
    }
    if (showLeftEllipsis && !showRightEllipsis) {
        const rightRange = range(lastPageIndex - itemCount + 1, lastPageIndex);
        return [
            firstPageIndex,
            ELLIPSIS,
            ...rightRange
        ];
    }
    if (showLeftEllipsis && showRightEllipsis) {
        const middleRange = range(leftSiblingIndex, rightSiblingIndex);
        return [
            firstPageIndex,
            ELLIPSIS,
            ...middleRange,
            ELLIPSIS,
            lastPageIndex
        ];
    }
    const fullRange = range(firstPageIndex, lastPageIndex);
    return fullRange;
};
var getTransformedRange = (ctx)=>transform(getRange(ctx));
// src/pagination.connect.ts
function connect(service, normalize) {
    const { send, scope, prop, computed, context } = service;
    const totalPages = computed("totalPages");
    const page = context.get("page");
    const translations = prop("translations");
    const count = prop("count");
    const previousPage = computed("previousPage");
    const nextPage = computed("nextPage");
    const pageRange = computed("pageRange");
    const type = prop("type");
    const isButton = type === "button";
    const isFirstPage = page === 1;
    const isLastPage = page === totalPages;
    const pages = getTransformedRange({
        page,
        totalPages,
        siblingCount: prop("siblingCount")
    });
    return {
        count,
        page,
        pageSize: context.get("pageSize"),
        totalPages,
        pages,
        previousPage,
        nextPage,
        pageRange,
        slice (data) {
            return data.slice(pageRange.start, pageRange.end);
        },
        setPageSize (size) {
            send({
                type: "SET_PAGE_SIZE",
                size
            });
        },
        setPage (page2) {
            send({
                type: "SET_PAGE",
                page: page2
            });
        },
        goToNextPage () {
            send({
                type: "NEXT_PAGE"
            });
        },
        goToPrevPage () {
            send({
                type: "PREVIOUS_PAGE"
            });
        },
        goToFirstPage () {
            send({
                type: "FIRST_PAGE"
            });
        },
        goToLastPage () {
            send({
                type: "LAST_PAGE"
            });
        },
        getRootProps () {
            return normalize.element({
                id: getRootId(scope),
                ...parts.root.attrs,
                dir: prop("dir"),
                "aria-label": translations.rootLabel
            });
        },
        getEllipsisProps (props2) {
            return normalize.element({
                id: getEllipsisId(scope, props2.index),
                ...parts.ellipsis.attrs,
                dir: prop("dir")
            });
        },
        getItemProps (props2) {
            const index = props2.value;
            const isCurrentPage = index === page;
            return normalize.element({
                id: getItemId(scope, index),
                ...parts.item.attrs,
                dir: prop("dir"),
                "data-index": index,
                "data-selected": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(isCurrentPage),
                "aria-current": isCurrentPage ? "page" : void 0,
                "aria-label": translations.itemLabel?.({
                    page: index,
                    totalPages
                }),
                onClick () {
                    send({
                        type: "SET_PAGE",
                        page: index
                    });
                },
                ...isButton && {
                    type: "button"
                }
            });
        },
        getPrevTriggerProps () {
            return normalize.element({
                id: getPrevTriggerId(scope),
                ...parts.prevTrigger.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(isFirstPage),
                "aria-label": translations.prevTriggerLabel,
                onClick () {
                    send({
                        type: "PREVIOUS_PAGE"
                    });
                },
                ...isButton && {
                    disabled: isFirstPage,
                    type: "button"
                }
            });
        },
        getNextTriggerProps () {
            return normalize.element({
                id: getNextTriggerId(scope),
                ...parts.nextTrigger.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(isLastPage),
                "aria-label": translations.nextTriggerLabel,
                onClick () {
                    send({
                        type: "NEXT_PAGE"
                    });
                },
                ...isButton && {
                    disabled: isLastPage,
                    type: "button"
                }
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            defaultPageSize: 10,
            siblingCount: 1,
            defaultPage: 1,
            type: "button",
            count: 1,
            ...props2,
            translations: {
                rootLabel: "pagination",
                prevTriggerLabel: "previous page",
                nextTriggerLabel: "next page",
                itemLabel ({ page, totalPages }) {
                    const isLastPage = totalPages > 1 && page === totalPages;
                    return `${isLastPage ? "last page, " : ""}page ${page}`;
                },
                ...props2.translations
            }
        };
    },
    initialState () {
        return "idle";
    },
    context ({ prop, bindable, getContext }) {
        return {
            page: bindable(()=>({
                    value: prop("page"),
                    defaultValue: prop("defaultPage"),
                    onChange (value) {
                        const context = getContext();
                        prop("onPageChange")?.({
                            page: value,
                            pageSize: context.get("pageSize")
                        });
                    }
                })),
            pageSize: bindable(()=>({
                    value: prop("pageSize"),
                    defaultValue: prop("defaultPageSize"),
                    onChange (value) {
                        prop("onPageSizeChange")?.({
                            pageSize: value
                        });
                    }
                }))
        };
    },
    watch ({ track, context, action }) {
        track([
            ()=>context.get("pageSize")
        ], ()=>{
            action([
                "setPageIfNeeded"
            ]);
        });
    },
    computed: {
        totalPages: ({ context, prop })=>Math.ceil(prop("count") / context.get("pageSize")),
        previousPage: ({ context })=>context.get("page") === 1 ? null : context.get("page") - 1,
        nextPage: ({ context, computed })=>context.get("page") === computed("totalPages") ? null : context.get("page") + 1,
        pageRange: ({ context, prop })=>{
            const start = (context.get("page") - 1) * context.get("pageSize");
            const end = Math.min(start + context.get("pageSize"), prop("count"));
            return {
                start,
                end
            };
        },
        isValidPage: ({ context, computed })=>context.get("page") >= 1 && context.get("page") <= computed("totalPages")
    },
    on: {
        SET_PAGE: {
            guard: "isValidPage",
            actions: [
                "setPage"
            ]
        },
        SET_PAGE_SIZE: {
            actions: [
                "setPageSize"
            ]
        },
        FIRST_PAGE: {
            actions: [
                "goToFirstPage"
            ]
        },
        LAST_PAGE: {
            actions: [
                "goToLastPage"
            ]
        },
        PREVIOUS_PAGE: {
            guard: "canGoToPrevPage",
            actions: [
                "goToPrevPage"
            ]
        },
        NEXT_PAGE: {
            guard: "canGoToNextPage",
            actions: [
                "goToNextPage"
            ]
        }
    },
    states: {
        idle: {}
    },
    implementations: {
        guards: {
            isValidPage: ({ event, computed })=>event.page >= 1 && event.page <= computed("totalPages"),
            isValidCount: ({ context, event })=>context.get("page") > event.count,
            canGoToNextPage: ({ context, computed })=>context.get("page") < computed("totalPages"),
            canGoToPrevPage: ({ context })=>context.get("page") > 1
        },
        actions: {
            setPage ({ context, event, computed }) {
                const page = clampPage(event.page, computed("totalPages"));
                context.set("page", page);
            },
            setPageSize ({ context, event }) {
                context.set("pageSize", event.size);
            },
            goToFirstPage ({ context }) {
                context.set("page", 1);
            },
            goToLastPage ({ context, computed }) {
                context.set("page", computed("totalPages"));
            },
            goToPrevPage ({ context, computed }) {
                context.set("page", (prev)=>clampPage(prev - 1, computed("totalPages")));
            },
            goToNextPage ({ context, computed }) {
                context.set("page", (prev)=>clampPage(prev + 1, computed("totalPages")));
            },
            setPageIfNeeded ({ context, computed }) {
                if (computed("isValidPage")) return;
                context.set("page", 1);
            }
        }
    }
});
var clampPage = (page, totalPages)=>Math.min(Math.max(page, 1), totalPages);
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createProps"])()([
    "count",
    "dir",
    "getRootNode",
    "id",
    "ids",
    "onPageChange",
    "onPageSizeChange",
    "page",
    "defaultPage",
    "pageSize",
    "defaultPageSize",
    "siblingCount",
    "translations",
    "type"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var itemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createProps"])()([
    "value",
    "type"
]);
var splitItemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createSplitProps"])(itemProps);
var ellipsisProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createProps"])()([
    "index"
]);
var splitEllipsisProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createSplitProps"])(ellipsisProps);
;
}),
"[project]/node_modules/@zag-js/steps/dist/index.mjs [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-ssr] (ecmascript)");
;
;
;
;
;
// src/steps.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createAnatomy"])("steps").parts("root", "list", "item", "trigger", "indicator", "separator", "content", "nextTrigger", "prevTrigger", "progress");
var parts = anatomy.build();
// src/steps.dom.ts
var getRootId = (ctx)=>ctx.ids?.root ?? `steps:${ctx.id}`;
var getListId = (ctx)=>ctx.ids?.list ?? `steps:${ctx.id}:list`;
var getTriggerId = (ctx, index)=>ctx.ids?.triggerId?.(index) ?? `steps:${ctx.id}:trigger:${index}`;
var getContentId = (ctx, index)=>ctx.ids?.contentId?.(index) ?? `steps:${ctx.id}:content:${index}`;
// src/steps.connect.ts
function connect(service, normalize) {
    const { context, send, computed, prop, scope } = service;
    const step = context.get("step");
    const count = prop("count");
    const percent = computed("percent");
    const hasNextStep = computed("hasNextStep");
    const hasPrevStep = computed("hasPrevStep");
    const getItemState = (props2)=>({
            triggerId: getTriggerId(scope, props2.index),
            contentId: getContentId(scope, props2.index),
            current: props2.index === step,
            completed: props2.index < step,
            incomplete: props2.index > step,
            index: props2.index,
            first: props2.index === 0,
            last: props2.index === count - 1
        });
    const goToNextStep = ()=>{
        send({
            type: "STEP.NEXT",
            src: "next.trigger.click"
        });
    };
    const goToPrevStep = ()=>{
        send({
            type: "STEP.PREV",
            src: "prev.trigger.click"
        });
    };
    const resetStep = ()=>{
        send({
            type: "STEP.RESET",
            src: "reset.trigger.click"
        });
    };
    const setStep = (value)=>{
        send({
            type: "STEP.SET",
            value,
            src: "api.setValue"
        });
    };
    return {
        value: step,
        count,
        percent,
        hasNextStep,
        hasPrevStep,
        isCompleted: computed("completed"),
        goToNextStep,
        goToPrevStep,
        resetStep,
        getItemState,
        setStep,
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                id: getRootId(scope),
                dir: prop("dir"),
                "data-orientation": prop("orientation"),
                style: {
                    "--percent": `${percent}%`
                }
            });
        },
        getListProps () {
            const arr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fromLength"])(count);
            const triggerIds = arr.map((_, index)=>getTriggerId(scope, index));
            return normalize.element({
                ...parts.list.attrs,
                dir: prop("dir"),
                id: getListId(scope),
                role: "tablist",
                "aria-owns": triggerIds.join(" "),
                "aria-orientation": prop("orientation"),
                "data-orientation": prop("orientation")
            });
        },
        getItemProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.item.attrs,
                dir: prop("dir"),
                "aria-current": itemState.current ? "step" : void 0,
                "data-orientation": prop("orientation")
            });
        },
        getTriggerProps (props2) {
            const itemState = getItemState(props2);
            return normalize.button({
                ...parts.trigger.attrs,
                id: itemState.triggerId,
                role: "tab",
                dir: prop("dir"),
                tabIndex: !prop("linear") || itemState.current ? 0 : -1,
                "aria-selected": itemState.current,
                "aria-controls": itemState.contentId,
                "data-state": itemState.current ? "open" : "closed",
                "data-orientation": prop("orientation"),
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.completed),
                "data-current": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.current),
                "data-incomplete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.incomplete),
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (prop("linear")) return;
                    send({
                        type: "STEP.SET",
                        value: props2.index,
                        src: "trigger.click"
                    });
                }
            });
        },
        getContentProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.content.attrs,
                dir: prop("dir"),
                id: itemState.contentId,
                role: "tabpanel",
                tabIndex: 0,
                hidden: !itemState.current,
                "data-state": itemState.current ? "open" : "closed",
                "data-orientation": prop("orientation"),
                "aria-labelledby": itemState.triggerId
            });
        },
        getIndicatorProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.indicator.attrs,
                dir: prop("dir"),
                "aria-hidden": true,
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.completed),
                "data-current": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.current),
                "data-incomplete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.incomplete)
            });
        },
        getSeparatorProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.separator.attrs,
                dir: prop("dir"),
                "data-orientation": prop("orientation"),
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.completed),
                "data-current": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.current),
                "data-incomplete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.incomplete)
            });
        },
        getNextTriggerProps () {
            return normalize.button({
                ...parts.nextTrigger.attrs,
                dir: prop("dir"),
                type: "button",
                disabled: !hasNextStep,
                onClick (event) {
                    if (event.defaultPrevented) return;
                    goToNextStep();
                }
            });
        },
        getPrevTriggerProps () {
            return normalize.button({
                dir: prop("dir"),
                ...parts.prevTrigger.attrs,
                type: "button",
                disabled: !hasPrevStep,
                onClick (event) {
                    if (event.defaultPrevented) return;
                    goToPrevStep();
                }
            });
        },
        getProgressProps () {
            return normalize.element({
                dir: prop("dir"),
                ...parts.progress.attrs,
                role: "progressbar",
                "aria-valuenow": percent,
                "aria-valuemin": 0,
                "aria-valuemax": 100,
                "aria-valuetext": `${percent}% complete`,
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(percent === 100)
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            defaultStep: 0,
            count: 1,
            linear: false,
            orientation: "horizontal",
            ...props2
        };
    },
    context ({ prop, bindable }) {
        return {
            step: bindable(()=>({
                    defaultValue: prop("defaultStep"),
                    value: prop("step"),
                    onChange (value) {
                        prop("onStepChange")?.({
                            step: value
                        });
                        const completed = value == prop("count");
                        if (completed) prop("onStepComplete")?.();
                    }
                }))
        };
    },
    computed: {
        percent: ({ context, prop })=>context.get("step") / prop("count") * 100,
        hasNextStep: ({ context, prop })=>context.get("step") < prop("count"),
        hasPrevStep: ({ context })=>context.get("step") > 0,
        completed: ({ context, prop })=>context.get("step") === prop("count")
    },
    initialState () {
        return "idle";
    },
    entry: [
        "validateStep"
    ],
    states: {
        idle: {
            on: {
                "STEP.SET": {
                    actions: [
                        "setStep"
                    ]
                },
                "STEP.NEXT": {
                    actions: [
                        "goToNextStep"
                    ]
                },
                "STEP.PREV": {
                    actions: [
                        "goToPrevStep"
                    ]
                },
                "STEP.RESET": {
                    actions: [
                        "resetStep"
                    ]
                }
            }
        }
    },
    implementations: {
        actions: {
            goToNextStep ({ context, prop }) {
                const value = Math.min(context.get("step") + 1, prop("count"));
                context.set("step", value);
            },
            goToPrevStep ({ context }) {
                const value = Math.max(context.get("step") - 1, 0);
                context.set("step", value);
            },
            resetStep ({ context }) {
                context.set("step", 0);
            },
            setStep ({ context, event }) {
                context.set("step", event.value);
            },
            validateStep ({ context, prop }) {
                validateStep(prop("count"), context.get("step"));
            }
        }
    }
});
var validateStep = (count, step)=>{
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValueWithinRange"])(step, 0, count)) {
        throw new RangeError(`[zag-js/steps] step index ${step} is out of bounds`);
    }
};
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createProps"])()([
    "count",
    "dir",
    "getRootNode",
    "id",
    "ids",
    "linear",
    "onStepChange",
    "onStepComplete",
    "orientation",
    "step",
    "defaultStep"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}),
"[project]/node_modules/@zag-js/tabs/dist/index.mjs [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "contentProps",
    ()=>contentProps,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitContentProps",
    ()=>splitContentProps,
    "splitProps",
    ()=>splitProps,
    "splitTriggerProps",
    ()=>splitTriggerProps,
    "triggerProps",
    ()=>triggerProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-ssr] (ecmascript)");
;
;
;
;
;
// src/tabs.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createAnatomy"])("tabs").parts("root", "list", "trigger", "content", "indicator");
var parts = anatomy.build();
var getRootId = (ctx)=>ctx.ids?.root ?? `tabs:${ctx.id}`;
var getListId = (ctx)=>ctx.ids?.list ?? `tabs:${ctx.id}:list`;
var getContentId = (ctx, id)=>ctx.ids?.content ?? `tabs:${ctx.id}:content-${id}`;
var getTriggerId = (ctx, id)=>ctx.ids?.trigger ?? `tabs:${ctx.id}:trigger-${id}`;
var getIndicatorId = (ctx)=>ctx.ids?.indicator ?? `tabs:${ctx.id}:indicator`;
var getListEl = (ctx)=>ctx.getById(getListId(ctx));
var getContentEl = (ctx, id)=>ctx.getById(getContentId(ctx, id));
var getTriggerEl = (ctx, id)=>ctx.getById(getTriggerId(ctx, id));
var getIndicatorEl = (ctx)=>ctx.getById(getIndicatorId(ctx));
var getElements = (ctx)=>{
    const ownerId = CSS.escape(getListId(ctx));
    const selector = `[role=tab][data-ownedby='${ownerId}']:not([disabled])`;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["queryAll"])(getListEl(ctx), selector);
};
var getFirstTriggerEl = (ctx)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["first"])(getElements(ctx));
var getLastTriggerEl = (ctx)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["last"])(getElements(ctx));
var getNextTriggerEl = (ctx, opts)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nextById"])(getElements(ctx), getTriggerId(ctx, opts.value), opts.loopFocus);
var getPrevTriggerEl = (ctx, opts)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["prevById"])(getElements(ctx), getTriggerId(ctx, opts.value), opts.loopFocus);
var getOffsetRect = (el)=>{
    return {
        left: el?.offsetLeft ?? 0,
        top: el?.offsetTop ?? 0,
        width: el?.offsetWidth ?? 0,
        height: el?.offsetHeight ?? 0
    };
};
var getRectById = (ctx, id)=>{
    const tab = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["itemById"])(getElements(ctx), getTriggerId(ctx, id));
    return resolveRect(getOffsetRect(tab));
};
var resolveRect = (rect)=>({
        width: `${rect.width}px`,
        height: `${rect.height}px`,
        left: `${rect.left}px`,
        top: `${rect.top}px`
    });
// src/tabs.connect.ts
function connect(service, normalize) {
    const { state, send, context, prop, scope } = service;
    const translations = prop("translations");
    const focused = state.matches("focused");
    const isVertical = prop("orientation") === "vertical";
    const isHorizontal = prop("orientation") === "horizontal";
    const composite = prop("composite");
    function getTriggerState(props2) {
        return {
            selected: context.get("value") === props2.value,
            focused: context.get("focusedValue") === props2.value,
            disabled: !!props2.disabled
        };
    }
    return {
        value: context.get("value"),
        focusedValue: context.get("focusedValue"),
        setValue (value) {
            send({
                type: "SET_VALUE",
                value
            });
        },
        clearValue () {
            send({
                type: "CLEAR_VALUE"
            });
        },
        setIndicatorRect (value) {
            const id = getTriggerId(scope, value);
            send({
                type: "SET_INDICATOR_RECT",
                id
            });
        },
        syncTabIndex () {
            send({
                type: "SYNC_TAB_INDEX"
            });
        },
        selectNext (fromValue) {
            send({
                type: "TAB_FOCUS",
                value: fromValue,
                src: "selectNext"
            });
            send({
                type: "ARROW_NEXT",
                src: "selectNext"
            });
        },
        selectPrev (fromValue) {
            send({
                type: "TAB_FOCUS",
                value: fromValue,
                src: "selectPrev"
            });
            send({
                type: "ARROW_PREV",
                src: "selectPrev"
            });
        },
        focus () {
            const value = context.get("value");
            if (!value) return;
            getTriggerEl(scope, value)?.focus();
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                id: getRootId(scope),
                "data-orientation": prop("orientation"),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                dir: prop("dir")
            });
        },
        getListProps () {
            return normalize.element({
                ...parts.list.attrs,
                id: getListId(scope),
                role: "tablist",
                dir: prop("dir"),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                "aria-orientation": prop("orientation"),
                "data-orientation": prop("orientation"),
                "aria-label": translations?.listLabel,
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelfTarget"])(event)) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isComposingEvent"])(event)) return;
                    const keyMap = {
                        ArrowDown () {
                            if (isHorizontal) return;
                            send({
                                type: "ARROW_NEXT",
                                key: "ArrowDown"
                            });
                        },
                        ArrowUp () {
                            if (isHorizontal) return;
                            send({
                                type: "ARROW_PREV",
                                key: "ArrowUp"
                            });
                        },
                        ArrowLeft () {
                            if (isVertical) return;
                            send({
                                type: "ARROW_PREV",
                                key: "ArrowLeft"
                            });
                        },
                        ArrowRight () {
                            if (isVertical) return;
                            send({
                                type: "ARROW_NEXT",
                                key: "ArrowRight"
                            });
                        },
                        Home () {
                            send({
                                type: "HOME"
                            });
                        },
                        End () {
                            send({
                                type: "END"
                            });
                        }
                    };
                    let key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getEventKey"])(event, {
                        dir: prop("dir"),
                        orientation: prop("orientation")
                    });
                    const exec = keyMap[key];
                    if (exec) {
                        event.preventDefault();
                        exec(event);
                        return;
                    }
                }
            });
        },
        getTriggerState,
        getTriggerProps (props2) {
            const { value, disabled } = props2;
            const triggerState = getTriggerState(props2);
            return normalize.button({
                ...parts.trigger.attrs,
                role: "tab",
                type: "button",
                disabled,
                dir: prop("dir"),
                "data-orientation": prop("orientation"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "aria-disabled": disabled,
                "data-value": value,
                "aria-selected": triggerState.selected,
                "data-selected": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(triggerState.selected),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(triggerState.focused),
                "aria-controls": triggerState.selected ? getContentId(scope, value) : void 0,
                "data-ownedby": getListId(scope),
                "data-ssr": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(context.get("ssr")),
                id: getTriggerId(scope, value),
                tabIndex: triggerState.selected && composite ? 0 : -1,
                onFocus () {
                    send({
                        type: "TAB_FOCUS",
                        value
                    });
                },
                onBlur (event) {
                    const target = event.relatedTarget;
                    if (target?.getAttribute("role") !== "tab") {
                        send({
                            type: "TAB_BLUR"
                        });
                    }
                },
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isOpeningInNewTab"])(event)) return;
                    if (disabled) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSafari"])()) {
                        event.currentTarget.focus();
                    }
                    send({
                        type: "TAB_CLICK",
                        value
                    });
                }
            });
        },
        getContentProps (props2) {
            const { value } = props2;
            const selected = context.get("value") === value;
            return normalize.element({
                ...parts.content.attrs,
                dir: prop("dir"),
                id: getContentId(scope, value),
                tabIndex: composite ? 0 : -1,
                "aria-labelledby": getTriggerId(scope, value),
                role: "tabpanel",
                "data-ownedby": getListId(scope),
                "data-selected": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(selected),
                "data-orientation": prop("orientation"),
                hidden: !selected
            });
        },
        getIndicatorProps () {
            const indicatorRect = context.get("indicatorRect");
            const indicatorTransition = context.get("indicatorTransition");
            return normalize.element({
                id: getIndicatorId(scope),
                ...parts.indicator.attrs,
                dir: prop("dir"),
                "data-orientation": prop("orientation"),
                style: {
                    "--transition-property": "left, right, top, bottom, width, height",
                    "--left": indicatorRect.left,
                    "--top": indicatorRect.top,
                    "--width": indicatorRect.width,
                    "--height": indicatorRect.height,
                    position: "absolute",
                    willChange: "var(--transition-property)",
                    transitionProperty: "var(--transition-property)",
                    transitionDuration: indicatorTransition ? "var(--transition-duration, 150ms)" : "0ms",
                    transitionTimingFunction: "var(--transition-timing-function)",
                    [isHorizontal ? "left" : "top"]: isHorizontal ? "var(--left)" : "var(--top)"
                }
            });
        }
    };
}
var { createMachine } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setup"])();
var machine = createMachine({
    props ({ props: props2 }) {
        return {
            dir: "ltr",
            orientation: "horizontal",
            activationMode: "automatic",
            loopFocus: true,
            composite: true,
            navigate (details) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["clickIfLink"])(details.node);
            },
            defaultValue: null,
            ...props2
        };
    },
    initialState () {
        return "idle";
    },
    context ({ prop, bindable }) {
        return {
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    onChange (value) {
                        prop("onValueChange")?.({
                            value
                        });
                    }
                })),
            focusedValue: bindable(()=>({
                    defaultValue: prop("value") || prop("defaultValue"),
                    sync: true,
                    onChange (value) {
                        prop("onFocusChange")?.({
                            focusedValue: value
                        });
                    }
                })),
            ssr: bindable(()=>({
                    defaultValue: true
                })),
            indicatorTransition: bindable(()=>({
                    defaultValue: false
                })),
            indicatorRect: bindable(()=>({
                    defaultValue: {
                        left: "0px",
                        top: "0px",
                        width: "0px",
                        height: "0px"
                    }
                }))
        };
    },
    watch ({ context, prop, track, action }) {
        track([
            ()=>context.get("value")
        ], ()=>{
            action([
                "allowIndicatorTransition",
                "syncIndicatorRect",
                "syncTabIndex",
                "navigateIfNeeded"
            ]);
        });
        track([
            ()=>prop("dir"),
            ()=>prop("orientation")
        ], ()=>{
            action([
                "syncIndicatorRect"
            ]);
        });
    },
    on: {
        SET_VALUE: {
            actions: [
                "setValue"
            ]
        },
        CLEAR_VALUE: {
            actions: [
                "clearValue"
            ]
        },
        SET_INDICATOR_RECT: {
            actions: [
                "setIndicatorRect"
            ]
        },
        SYNC_TAB_INDEX: {
            actions: [
                "syncTabIndex"
            ]
        }
    },
    entry: [
        "syncIndicatorRect",
        "syncTabIndex",
        "syncSsr"
    ],
    exit: [
        "cleanupObserver"
    ],
    states: {
        idle: {
            on: {
                TAB_FOCUS: {
                    target: "focused",
                    actions: [
                        "setFocusedValue"
                    ]
                },
                TAB_CLICK: {
                    target: "focused",
                    actions: [
                        "setFocusedValue",
                        "setValue"
                    ]
                }
            }
        },
        focused: {
            on: {
                TAB_CLICK: {
                    actions: [
                        "setFocusedValue",
                        "setValue"
                    ]
                },
                ARROW_PREV: [
                    {
                        guard: "selectOnFocus",
                        actions: [
                            "focusPrevTab",
                            "selectFocusedTab"
                        ]
                    },
                    {
                        actions: [
                            "focusPrevTab"
                        ]
                    }
                ],
                ARROW_NEXT: [
                    {
                        guard: "selectOnFocus",
                        actions: [
                            "focusNextTab",
                            "selectFocusedTab"
                        ]
                    },
                    {
                        actions: [
                            "focusNextTab"
                        ]
                    }
                ],
                HOME: [
                    {
                        guard: "selectOnFocus",
                        actions: [
                            "focusFirstTab",
                            "selectFocusedTab"
                        ]
                    },
                    {
                        actions: [
                            "focusFirstTab"
                        ]
                    }
                ],
                END: [
                    {
                        guard: "selectOnFocus",
                        actions: [
                            "focusLastTab",
                            "selectFocusedTab"
                        ]
                    },
                    {
                        actions: [
                            "focusLastTab"
                        ]
                    }
                ],
                TAB_FOCUS: {
                    actions: [
                        "setFocusedValue"
                    ]
                },
                TAB_BLUR: {
                    target: "idle",
                    actions: [
                        "clearFocusedValue"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            selectOnFocus: ({ prop })=>prop("activationMode") === "automatic"
        },
        actions: {
            selectFocusedTab ({ context, prop }) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const focusedValue = context.get("focusedValue");
                    if (!focusedValue) return;
                    const nullable = prop("deselectable") && context.get("value") === focusedValue;
                    const value = nullable ? null : focusedValue;
                    context.set("value", value);
                });
            },
            setFocusedValue ({ context, event, flush }) {
                if (event.value == null) return;
                flush(()=>{
                    context.set("focusedValue", event.value);
                });
            },
            clearFocusedValue ({ context }) {
                context.set("focusedValue", null);
            },
            setValue ({ context, event, prop }) {
                const nullable = prop("deselectable") && context.get("value") === context.get("focusedValue");
                context.set("value", nullable ? null : event.value);
            },
            clearValue ({ context }) {
                context.set("value", null);
            },
            focusFirstTab ({ scope }) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    getFirstTriggerEl(scope)?.focus();
                });
            },
            focusLastTab ({ scope }) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    getLastTriggerEl(scope)?.focus();
                });
            },
            focusNextTab ({ context, prop, scope, event }) {
                const focusedValue = event.value ?? context.get("focusedValue");
                if (!focusedValue) return;
                const triggerEl = getNextTriggerEl(scope, {
                    value: focusedValue,
                    loopFocus: prop("loopFocus")
                });
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    if (prop("composite")) {
                        triggerEl?.focus();
                    } else if (triggerEl?.dataset.value != null) {
                        context.set("focusedValue", triggerEl.dataset.value);
                    }
                });
            },
            focusPrevTab ({ context, prop, scope, event }) {
                const focusedValue = event.value ?? context.get("focusedValue");
                if (!focusedValue) return;
                const triggerEl = getPrevTriggerEl(scope, {
                    value: focusedValue,
                    loopFocus: prop("loopFocus")
                });
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    if (prop("composite")) {
                        triggerEl?.focus();
                    } else if (triggerEl?.dataset.value != null) {
                        context.set("focusedValue", triggerEl.dataset.value);
                    }
                });
            },
            syncTabIndex ({ context, scope }) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const value = context.get("value");
                    if (!value) return;
                    const contentEl = getContentEl(scope, value);
                    if (!contentEl) return;
                    const focusables = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusables"])(contentEl);
                    if (focusables.length > 0) {
                        contentEl.removeAttribute("tabindex");
                    } else {
                        contentEl.setAttribute("tabindex", "0");
                    }
                });
            },
            cleanupObserver ({ refs }) {
                const cleanup = refs.get("indicatorCleanup");
                if (cleanup) cleanup();
            },
            allowIndicatorTransition ({ context }) {
                context.set("indicatorTransition", true);
            },
            setIndicatorRect ({ context, event, scope }) {
                const value = event.id ?? context.get("value");
                const indicatorEl = getIndicatorEl(scope);
                if (!indicatorEl) return;
                if (!value) {
                    context.set("indicatorTransition", false);
                    return;
                }
                const triggerEl = getTriggerEl(scope, value);
                if (!triggerEl) return;
                context.set("indicatorRect", getRectById(scope, value));
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nextTick"])(()=>{
                    context.set("indicatorTransition", false);
                });
            },
            syncSsr ({ context }) {
                context.set("ssr", false);
            },
            syncIndicatorRect ({ context, refs, scope }) {
                const cleanup = refs.get("indicatorCleanup");
                if (cleanup) cleanup();
                const value = context.get("value");
                if (!value) {
                    context.set("indicatorTransition", false);
                    return;
                }
                const triggerEl = getTriggerEl(scope, value);
                const indicatorEl = getIndicatorEl(scope);
                if (!triggerEl || !indicatorEl) return;
                const indicatorCleanup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["trackElementRect"])([
                    triggerEl
                ], {
                    measure (el) {
                        return getOffsetRect(el);
                    },
                    onEntry ({ rects }) {
                        const [rect] = rects;
                        context.set("indicatorRect", resolveRect(rect));
                    }
                });
                refs.set("indicatorCleanup", indicatorCleanup);
            },
            navigateIfNeeded ({ context, prop, scope }) {
                const value = context.get("value");
                if (!value) return;
                const triggerEl = getTriggerEl(scope, value);
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isAnchorElement"])(triggerEl)) {
                    prop("navigate")?.({
                        value,
                        node: triggerEl,
                        href: triggerEl.href
                    });
                }
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createProps"])()([
    "activationMode",
    "composite",
    "deselectable",
    "dir",
    "getRootNode",
    "id",
    "ids",
    "loopFocus",
    "navigate",
    "onFocusChange",
    "onValueChange",
    "orientation",
    "translations",
    "value",
    "defaultValue"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var triggerProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createProps"])()([
    "disabled",
    "value"
]);
var splitTriggerProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createSplitProps"])(triggerProps);
var contentProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createProps"])()([
    "value"
]);
var splitContentProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createSplitProps"])(contentProps);
;
}),
"[project]/node_modules/@zag-js/toast/dist/index.mjs [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "createStore",
    ()=>createToastStore,
    "group",
    ()=>group,
    "machine",
    ()=>machine
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dismissable/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-ssr] (ecmascript)");
;
;
;
;
;
// src/toast-group.connect.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createAnatomy"])("toast").parts("group", "root", "title", "description", "actionTrigger", "closeTrigger");
var parts = anatomy.build();
// src/toast.dom.ts
var getRegionId = (placement)=>`toast-group:${placement}`;
var getRegionEl = (ctx, placement)=>ctx.getById(`toast-group:${placement}`);
var getRootId = (ctx)=>`toast:${ctx.id}`;
var getRootEl = (ctx)=>ctx.getById(getRootId(ctx));
var getTitleId = (ctx)=>`toast:${ctx.id}:title`;
var getDescriptionId = (ctx)=>`toast:${ctx.id}:description`;
var getCloseTriggerId = (ctx)=>`toast${ctx.id}:close`;
var defaultTimeouts = {
    info: 5e3,
    error: 5e3,
    success: 2e3,
    loading: Infinity,
    DEFAULT: 5e3
};
function getToastDuration(duration, type) {
    return duration ?? defaultTimeouts[type] ?? defaultTimeouts.DEFAULT;
}
var getOffsets = (offsets)=>typeof offsets === "string" ? {
        left: offsets,
        right: offsets,
        bottom: offsets,
        top: offsets
    } : offsets;
function getGroupPlacementStyle(service, placement) {
    const { prop, computed, context } = service;
    const { offsets, gap } = prop("store").attrs;
    const heights = context.get("heights");
    const computedOffset = getOffsets(offsets);
    const rtl = prop("dir") === "rtl";
    const computedPlacement = placement.replace("-start", rtl ? "-right" : "-left").replace("-end", rtl ? "-left" : "-right");
    const isRighty = computedPlacement.includes("right");
    const isLefty = computedPlacement.includes("left");
    const styles = {
        position: "fixed",
        pointerEvents: computed("count") > 0 ? void 0 : "none",
        display: "flex",
        flexDirection: "column",
        "--gap": `${gap}px`,
        "--first-height": `${heights[0]?.height || 0}px`,
        zIndex: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MAX_Z_INDEX"]
    };
    let alignItems = "center";
    if (isRighty) alignItems = "flex-end";
    if (isLefty) alignItems = "flex-start";
    styles.alignItems = alignItems;
    if (computedPlacement.includes("top")) {
        const offset = computedOffset.top;
        styles.top = `max(env(safe-area-inset-top, 0px), ${offset})`;
    }
    if (computedPlacement.includes("bottom")) {
        const offset = computedOffset.bottom;
        styles.bottom = `max(env(safe-area-inset-bottom, 0px), ${offset})`;
    }
    if (!computedPlacement.includes("left")) {
        const offset = computedOffset.right;
        styles.insetInlineEnd = `calc(env(safe-area-inset-right, 0px) + ${offset})`;
    }
    if (!computedPlacement.includes("right")) {
        const offset = computedOffset.left;
        styles.insetInlineStart = `calc(env(safe-area-inset-left, 0px) + ${offset})`;
    }
    return styles;
}
function getPlacementStyle(service, visible) {
    const { prop, context, computed } = service;
    const parent = prop("parent");
    const placement = parent.computed("placement");
    const { gap } = parent.prop("store").attrs;
    const [side] = placement.split("-");
    const mounted = context.get("mounted");
    const remainingTime = context.get("remainingTime");
    const height = computed("height");
    const frontmost = computed("frontmost");
    const sibling = !frontmost;
    const overlap = !prop("stacked");
    const stacked = prop("stacked");
    const type = prop("type");
    const duration = type === "loading" ? Number.MAX_SAFE_INTEGER : remainingTime;
    const offset = computed("heightIndex") * gap + computed("heightBefore");
    const styles = {
        position: "absolute",
        pointerEvents: "auto",
        "--opacity": "0",
        "--remove-delay": `${prop("removeDelay")}ms`,
        "--duration": `${duration}ms`,
        "--initial-height": `${height}px`,
        "--offset": `${offset}px`,
        "--index": prop("index"),
        "--z-index": computed("zIndex"),
        "--lift-amount": "calc(var(--lift) * var(--gap))",
        "--y": "100%",
        "--x": "0"
    };
    const assign = (overrides)=>Object.assign(styles, overrides);
    if (side === "top") {
        assign({
            top: "0",
            "--sign": "-1",
            "--y": "-100%",
            "--lift": "1"
        });
    } else if (side === "bottom") {
        assign({
            bottom: "0",
            "--sign": "1",
            "--y": "100%",
            "--lift": "-1"
        });
    }
    if (mounted) {
        assign({
            "--y": "0",
            "--opacity": "1"
        });
        if (stacked) {
            assign({
                "--y": "calc(var(--lift) * var(--offset))",
                "--height": "var(--initial-height)"
            });
        }
    }
    if (!visible) {
        assign({
            "--opacity": "0",
            pointerEvents: "none"
        });
    }
    if (sibling && overlap) {
        assign({
            "--base-scale": "var(--index) * 0.05 + 1",
            "--y": "calc(var(--lift-amount) * var(--index))",
            "--scale": "calc(-1 * var(--base-scale))",
            "--height": "var(--first-height)"
        });
        if (!visible) {
            assign({
                "--y": "calc(var(--sign) * 40%)"
            });
        }
    }
    if (sibling && stacked && !visible) {
        assign({
            "--y": "calc(var(--lift) * var(--offset) + var(--lift) * -100%)"
        });
    }
    if (frontmost && !visible) {
        assign({
            "--y": "calc(var(--lift) * -100%)"
        });
    }
    return styles;
}
function getGhostBeforeStyle(service, visible) {
    const { computed } = service;
    const styles = {
        position: "absolute",
        inset: "0",
        scale: "1 2",
        pointerEvents: visible ? "none" : "auto"
    };
    const assign = (overrides)=>Object.assign(styles, overrides);
    if (computed("frontmost") && !visible) {
        assign({
            height: "calc(var(--initial-height) + 80%)"
        });
    }
    return styles;
}
function getGhostAfterStyle() {
    return {
        position: "absolute",
        left: "0",
        height: "calc(var(--gap) + 2px)",
        bottom: "100%",
        width: "100%"
    };
}
// src/toast-group.connect.ts
function groupConnect(service, normalize) {
    const { context, prop, send, refs, computed } = service;
    return {
        getCount () {
            return context.get("toasts").length;
        },
        getToasts () {
            return context.get("toasts");
        },
        getGroupProps (options = {}) {
            const { label = "Notifications" } = options;
            const { hotkey } = prop("store").attrs;
            const hotkeyLabel = hotkey.join("+").replace(/Key/g, "").replace(/Digit/g, "");
            const placement = computed("placement");
            const [side, align = "center"] = placement.split("-");
            return normalize.element({
                ...parts.group.attrs,
                dir: prop("dir"),
                tabIndex: -1,
                "aria-label": `${placement} ${label} ${hotkeyLabel}`,
                id: getRegionId(placement),
                "data-placement": placement,
                "data-side": side,
                "data-align": align,
                "aria-live": "polite",
                role: "region",
                style: getGroupPlacementStyle(service, placement),
                onMouseMove () {
                    send({
                        type: "REGION.POINTER_ENTER",
                        placement
                    });
                },
                onMouseLeave () {
                    send({
                        type: "REGION.POINTER_LEAVE",
                        placement
                    });
                },
                onFocus (event) {
                    send({
                        type: "REGION.FOCUS",
                        target: event.relatedTarget
                    });
                },
                onBlur (event) {
                    if (refs.get("isFocusWithin") && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"])(event.currentTarget, event.relatedTarget)) {
                        queueMicrotask(()=>send({
                                type: "REGION.BLUR"
                            }));
                    }
                }
            });
        },
        subscribe (fn) {
            const store = prop("store");
            return store.subscribe(()=>fn(context.get("toasts")));
        }
    };
}
var groupMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props }) {
        return {
            dir: "ltr",
            id: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["uuid"])(),
            ...props,
            store: props.store
        };
    },
    initialState ({ prop }) {
        return prop("store").attrs.overlap ? "overlap" : "stack";
    },
    refs () {
        return {
            lastFocusedEl: null,
            isFocusWithin: false,
            dismissableCleanup: void 0
        };
    },
    context ({ bindable }) {
        return {
            toasts: bindable(()=>({
                    defaultValue: [],
                    sync: true,
                    hash: (toasts)=>toasts.map((t)=>t.id).join(",")
                })),
            heights: bindable(()=>({
                    defaultValue: [],
                    sync: true
                }))
        };
    },
    computed: {
        count: ({ context })=>context.get("toasts").length,
        overlap: ({ prop })=>prop("store").attrs.overlap,
        placement: ({ prop })=>prop("store").attrs.placement
    },
    effects: [
        "subscribeToStore",
        "trackDocumentVisibility",
        "trackHotKeyPress"
    ],
    watch ({ track, context, action }) {
        track([
            ()=>context.hash("toasts")
        ], ()=>{
            queueMicrotask(()=>{
                action([
                    "collapsedIfEmpty",
                    "setDismissableBranch"
                ]);
            });
        });
    },
    exit: [
        "clearDismissableBranch",
        "clearLastFocusedEl"
    ],
    on: {
        "DOC.HOTKEY": {
            actions: [
                "focusRegionEl"
            ]
        },
        "REGION.BLUR": [
            {
                guard: "isOverlapping",
                target: "overlap",
                actions: [
                    "collapseToasts",
                    "resumeToasts",
                    "restoreLastFocusedEl"
                ]
            },
            {
                target: "stack",
                actions: [
                    "resumeToasts",
                    "restoreLastFocusedEl"
                ]
            }
        ],
        "TOAST.REMOVE": {
            actions: [
                "removeToast",
                "removeHeight"
            ]
        },
        "TOAST.PAUSE": {
            actions: [
                "pauseToasts"
            ]
        }
    },
    states: {
        stack: {
            on: {
                "REGION.POINTER_LEAVE": [
                    {
                        guard: "isOverlapping",
                        target: "overlap",
                        actions: [
                            "resumeToasts",
                            "collapseToasts"
                        ]
                    },
                    {
                        actions: [
                            "resumeToasts"
                        ]
                    }
                ],
                "REGION.OVERLAP": {
                    target: "overlap",
                    actions: [
                        "collapseToasts"
                    ]
                },
                "REGION.FOCUS": {
                    actions: [
                        "setLastFocusedEl",
                        "pauseToasts"
                    ]
                },
                "REGION.POINTER_ENTER": {
                    actions: [
                        "pauseToasts"
                    ]
                }
            }
        },
        overlap: {
            on: {
                "REGION.STACK": {
                    target: "stack",
                    actions: [
                        "expandToasts"
                    ]
                },
                "REGION.POINTER_ENTER": {
                    target: "stack",
                    actions: [
                        "pauseToasts",
                        "expandToasts"
                    ]
                },
                "REGION.FOCUS": {
                    target: "stack",
                    actions: [
                        "setLastFocusedEl",
                        "pauseToasts",
                        "expandToasts"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            isOverlapping: ({ computed })=>computed("overlap")
        },
        effects: {
            subscribeToStore ({ context, prop }) {
                return prop("store").subscribe((toast)=>{
                    if (toast.dismiss) {
                        context.set("toasts", (prev)=>prev.filter((t)=>t.id !== toast.id));
                        return;
                    }
                    context.set("toasts", (prev)=>{
                        const index = prev.findIndex((t)=>t.id === toast.id);
                        if (index !== -1) {
                            return [
                                ...prev.slice(0, index),
                                {
                                    ...prev[index],
                                    ...toast
                                },
                                ...prev.slice(index + 1)
                            ];
                        }
                        return [
                            toast,
                            ...prev
                        ];
                    });
                });
            },
            trackHotKeyPress ({ prop, send }) {
                const handleKeyDown = (event)=>{
                    const { hotkey } = prop("store").attrs;
                    const isHotkeyPressed = hotkey.every((key)=>event[key] || event.code === key);
                    if (!isHotkeyPressed) return;
                    send({
                        type: "DOC.HOTKEY"
                    });
                };
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addDomEvent"])(document, "keydown", handleKeyDown, {
                    capture: true
                });
            },
            trackDocumentVisibility ({ prop, send, scope }) {
                const { pauseOnPageIdle } = prop("store").attrs;
                if (!pauseOnPageIdle) return;
                const doc = scope.getDoc();
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addDomEvent"])(doc, "visibilitychange", ()=>{
                    const isHidden = doc.visibilityState === "hidden";
                    send({
                        type: isHidden ? "PAUSE_ALL" : "RESUME_ALL"
                    });
                });
            }
        },
        actions: {
            setDismissableBranch ({ refs, context, computed, scope }) {
                const toasts = context.get("toasts");
                const placement = computed("placement");
                const hasToasts = toasts.length > 0;
                if (!hasToasts) {
                    refs.get("dismissableCleanup")?.();
                    return;
                }
                if (hasToasts && refs.get("dismissableCleanup")) {
                    return;
                }
                const groupEl = ()=>getRegionEl(scope, placement);
                const cleanup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["trackDismissableBranch"])(groupEl, {
                    defer: true
                });
                refs.set("dismissableCleanup", cleanup);
            },
            clearDismissableBranch ({ refs }) {
                refs.get("dismissableCleanup")?.();
            },
            focusRegionEl ({ scope, computed }) {
                queueMicrotask(()=>{
                    getRegionEl(scope, computed("placement"))?.focus();
                });
            },
            pauseToasts ({ prop }) {
                prop("store").pause();
            },
            resumeToasts ({ prop }) {
                prop("store").resume();
            },
            expandToasts ({ prop }) {
                prop("store").expand();
            },
            collapseToasts ({ prop }) {
                prop("store").collapse();
            },
            removeToast ({ prop, event }) {
                prop("store").remove(event.id);
            },
            removeHeight ({ event, context }) {
                if (event?.id == null) return;
                queueMicrotask(()=>{
                    context.set("heights", (heights)=>heights.filter((height)=>height.id !== event.id));
                });
            },
            collapsedIfEmpty ({ send, computed }) {
                if (!computed("overlap") || computed("count") > 1) return;
                send({
                    type: "REGION.OVERLAP"
                });
            },
            setLastFocusedEl ({ refs, event }) {
                if (refs.get("isFocusWithin") || !event.target) return;
                refs.set("isFocusWithin", true);
                refs.set("lastFocusedEl", event.target);
            },
            restoreLastFocusedEl ({ refs }) {
                if (!refs.get("lastFocusedEl")) return;
                refs.get("lastFocusedEl")?.focus({
                    preventScroll: true
                });
                refs.set("lastFocusedEl", null);
                refs.set("isFocusWithin", false);
            },
            clearLastFocusedEl ({ refs }) {
                if (!refs.get("lastFocusedEl")) return;
                refs.get("lastFocusedEl")?.focus({
                    preventScroll: true
                });
                refs.set("lastFocusedEl", null);
                refs.set("isFocusWithin", false);
            }
        }
    }
});
function connect(service, normalize) {
    const { state, send, prop, scope, context, computed } = service;
    const visible = state.hasTag("visible");
    const paused = state.hasTag("paused");
    const mounted = context.get("mounted");
    const frontmost = computed("frontmost");
    const placement = prop("parent").computed("placement");
    const type = prop("type");
    const stacked = prop("stacked");
    const title = prop("title");
    const description = prop("description");
    const action = prop("action");
    const [side, align = "center"] = placement.split("-");
    return {
        type,
        title,
        description,
        placement,
        visible,
        paused,
        closable: !!prop("closable"),
        pause () {
            send({
                type: "PAUSE"
            });
        },
        resume () {
            send({
                type: "RESUME"
            });
        },
        dismiss () {
            send({
                type: "DISMISS",
                src: "programmatic"
            });
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                dir: prop("dir"),
                id: getRootId(scope),
                "data-state": visible ? "open" : "closed",
                "data-type": type,
                "data-placement": placement,
                "data-align": align,
                "data-side": side,
                "data-mounted": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(mounted),
                "data-paused": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(paused),
                "data-first": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(frontmost),
                "data-sibling": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(!frontmost),
                "data-stack": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(stacked),
                "data-overlap": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(!stacked),
                role: "status",
                "aria-atomic": "true",
                "aria-describedby": description ? getDescriptionId(scope) : void 0,
                "aria-labelledby": title ? getTitleId(scope) : void 0,
                tabIndex: 0,
                style: getPlacementStyle(service, visible),
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if (event.key == "Escape") {
                        send({
                            type: "DISMISS",
                            src: "keyboard"
                        });
                        event.preventDefault();
                    }
                }
            });
        },
        /* Leave a ghost div to avoid setting hover to false when transitioning out */ getGhostBeforeProps () {
            return normalize.element({
                "data-ghost": "before",
                style: getGhostBeforeStyle(service, visible)
            });
        },
        /* Needed to avoid setting hover to false when in between toasts */ getGhostAfterProps () {
            return normalize.element({
                "data-ghost": "after",
                style: getGhostAfterStyle()
            });
        },
        getTitleProps () {
            return normalize.element({
                ...parts.title.attrs,
                id: getTitleId(scope)
            });
        },
        getDescriptionProps () {
            return normalize.element({
                ...parts.description.attrs,
                id: getDescriptionId(scope)
            });
        },
        getActionTriggerProps () {
            return normalize.button({
                ...parts.actionTrigger.attrs,
                type: "button",
                onClick (event) {
                    if (event.defaultPrevented) return;
                    action?.onClick?.();
                    send({
                        type: "DISMISS",
                        src: "user"
                    });
                }
            });
        },
        getCloseTriggerProps () {
            return normalize.button({
                id: getCloseTriggerId(scope),
                ...parts.closeTrigger.attrs,
                type: "button",
                "aria-label": "Dismiss notification",
                onClick (event) {
                    if (event.defaultPrevented) return;
                    send({
                        type: "DISMISS",
                        src: "user"
                    });
                }
            });
        }
    };
}
var { not } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createGuards"])();
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props }) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ensureProps"])(props, [
            "id",
            "type",
            "parent",
            "removeDelay"
        ], "toast");
        return {
            closable: true,
            ...props,
            duration: getToastDuration(props.duration, props.type)
        };
    },
    initialState ({ prop }) {
        const persist = prop("type") === "loading" || prop("duration") === Infinity;
        return persist ? "visible:persist" : "visible";
    },
    context ({ prop, bindable }) {
        return {
            remainingTime: bindable(()=>({
                    defaultValue: getToastDuration(prop("duration"), prop("type"))
                })),
            createdAt: bindable(()=>({
                    defaultValue: Date.now()
                })),
            mounted: bindable(()=>({
                    defaultValue: false
                })),
            initialHeight: bindable(()=>({
                    defaultValue: 0
                }))
        };
    },
    refs () {
        return {
            closeTimerStartTime: Date.now(),
            lastCloseStartTimerStartTime: 0
        };
    },
    computed: {
        zIndex: ({ prop })=>{
            const toasts = prop("parent").context.get("toasts");
            const index = toasts.findIndex((toast)=>toast.id === prop("id"));
            return toasts.length - index;
        },
        height: ({ prop })=>{
            const heights = prop("parent").context.get("heights");
            const height = heights.find((height2)=>height2.id === prop("id"));
            return height?.height ?? 0;
        },
        heightIndex: ({ prop })=>{
            const heights = prop("parent").context.get("heights");
            return heights.findIndex((height)=>height.id === prop("id"));
        },
        frontmost: ({ prop })=>prop("index") === 0,
        heightBefore: ({ prop })=>{
            const heights = prop("parent").context.get("heights");
            const heightIndex = heights.findIndex((height)=>height.id === prop("id"));
            return heights.reduce((prev, curr, reducerIndex)=>{
                if (reducerIndex >= heightIndex) return prev;
                return prev + curr.height;
            }, 0);
        },
        shouldPersist: ({ prop })=>prop("type") === "loading" || prop("duration") === Infinity
    },
    watch ({ track, prop, send }) {
        track([
            ()=>prop("message")
        ], ()=>{
            const message = prop("message");
            if (message) send({
                type: message,
                src: "programmatic"
            });
        });
        track([
            ()=>prop("type"),
            ()=>prop("duration")
        ], ()=>{
            send({
                type: "UPDATE"
            });
        });
    },
    on: {
        UPDATE: [
            {
                guard: "shouldPersist",
                target: "visible:persist",
                actions: [
                    "resetCloseTimer"
                ]
            },
            {
                target: "visible:updating",
                actions: [
                    "resetCloseTimer"
                ]
            }
        ],
        MEASURE: {
            actions: [
                "measureHeight"
            ]
        }
    },
    entry: [
        "setMounted",
        "measureHeight",
        "invokeOnVisible"
    ],
    effects: [
        "trackHeight"
    ],
    states: {
        "visible:updating": {
            tags: [
                "visible",
                "updating"
            ],
            effects: [
                "waitForNextTick"
            ],
            on: {
                SHOW: {
                    target: "visible"
                }
            }
        },
        "visible:persist": {
            tags: [
                "visible",
                "paused"
            ],
            on: {
                RESUME: {
                    guard: not("isLoadingType"),
                    target: "visible",
                    actions: [
                        "setCloseTimer"
                    ]
                },
                DISMISS: {
                    target: "dismissing"
                }
            }
        },
        visible: {
            tags: [
                "visible"
            ],
            effects: [
                "waitForDuration"
            ],
            on: {
                DISMISS: {
                    target: "dismissing"
                },
                PAUSE: {
                    target: "visible:persist",
                    actions: [
                        "syncRemainingTime"
                    ]
                }
            }
        },
        dismissing: {
            entry: [
                "invokeOnDismiss"
            ],
            effects: [
                "waitForRemoveDelay"
            ],
            on: {
                REMOVE: {
                    target: "unmounted",
                    actions: [
                        "notifyParentToRemove"
                    ]
                }
            }
        },
        unmounted: {
            entry: [
                "invokeOnUnmount"
            ]
        }
    },
    implementations: {
        effects: {
            waitForRemoveDelay ({ prop, send }) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setRafTimeout"])(()=>{
                    send({
                        type: "REMOVE",
                        src: "timer"
                    });
                }, prop("removeDelay"));
            },
            waitForDuration ({ send, context, computed }) {
                if (computed("shouldPersist")) return;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setRafTimeout"])(()=>{
                    send({
                        type: "DISMISS",
                        src: "timer"
                    });
                }, context.get("remainingTime"));
            },
            waitForNextTick ({ send }) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setRafTimeout"])(()=>{
                    send({
                        type: "SHOW",
                        src: "timer"
                    });
                }, 0);
            },
            trackHeight ({ scope, prop }) {
                let cleanup;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const rootEl = getRootEl(scope);
                    if (!rootEl) return;
                    const syncHeight = ()=>{
                        const originalHeight = rootEl.style.height;
                        rootEl.style.height = "auto";
                        const height = rootEl.getBoundingClientRect().height;
                        rootEl.style.height = originalHeight;
                        const item = {
                            id: prop("id"),
                            height
                        };
                        setHeight(prop("parent"), item);
                    };
                    const win = scope.getWin();
                    const observer = new win.MutationObserver(syncHeight);
                    observer.observe(rootEl, {
                        childList: true,
                        subtree: true,
                        characterData: true
                    });
                    cleanup = ()=>observer.disconnect();
                });
                return ()=>cleanup?.();
            }
        },
        guards: {
            isLoadingType: ({ prop })=>prop("type") === "loading",
            shouldPersist: ({ computed })=>computed("shouldPersist")
        },
        actions: {
            setMounted ({ context }) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    context.set("mounted", true);
                });
            },
            measureHeight ({ scope, prop, context }) {
                queueMicrotask(()=>{
                    const rootEl = getRootEl(scope);
                    if (!rootEl) return;
                    const originalHeight = rootEl.style.height;
                    rootEl.style.height = "auto";
                    const height = rootEl.getBoundingClientRect().height;
                    rootEl.style.height = originalHeight;
                    context.set("initialHeight", height);
                    const item = {
                        id: prop("id"),
                        height
                    };
                    setHeight(prop("parent"), item);
                });
            },
            setCloseTimer ({ refs }) {
                refs.set("closeTimerStartTime", Date.now());
            },
            resetCloseTimer ({ context, refs, prop }) {
                refs.set("closeTimerStartTime", Date.now());
                context.set("remainingTime", getToastDuration(prop("duration"), prop("type")));
            },
            syncRemainingTime ({ context, refs }) {
                context.set("remainingTime", (prev)=>{
                    const closeTimerStartTime = refs.get("closeTimerStartTime");
                    const elapsedTime = Date.now() - closeTimerStartTime;
                    refs.set("lastCloseStartTimerStartTime", Date.now());
                    return prev - elapsedTime;
                });
            },
            notifyParentToRemove ({ prop }) {
                const parent = prop("parent");
                parent.send({
                    type: "TOAST.REMOVE",
                    id: prop("id")
                });
            },
            invokeOnDismiss ({ prop, event }) {
                prop("onStatusChange")?.({
                    status: "dismissing",
                    src: event.src
                });
            },
            invokeOnUnmount ({ prop }) {
                prop("onStatusChange")?.({
                    status: "unmounted"
                });
            },
            invokeOnVisible ({ prop }) {
                prop("onStatusChange")?.({
                    status: "visible"
                });
            }
        }
    }
});
function setHeight(parent, item) {
    const { id, height } = item;
    parent.context.set("heights", (prev)=>{
        const alreadyExists = prev.find((i)=>i.id === id);
        if (!alreadyExists) {
            return [
                {
                    id,
                    height
                },
                ...prev
            ];
        } else {
            return prev.map((i)=>i.id === id ? {
                    ...i,
                    height
                } : i);
        }
    });
}
var withDefaults = (options, defaults)=>{
    return {
        ...defaults,
        ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compact"])(options)
    };
};
function createToastStore(props) {
    const attrs = withDefaults(props, {
        placement: "bottom",
        overlap: false,
        max: 24,
        gap: 16,
        offsets: "1rem",
        hotkey: [
            "altKey",
            "KeyT"
        ],
        removeDelay: 200,
        pauseOnPageIdle: true
    });
    let subscribers = [];
    let toasts = [];
    let dismissedToasts = /* @__PURE__ */ new Set();
    let toastQueue = [];
    const subscribe = (subscriber)=>{
        subscribers.push(subscriber);
        return ()=>{
            const index = subscribers.indexOf(subscriber);
            subscribers.splice(index, 1);
        };
    };
    const publish = (data)=>{
        subscribers.forEach((subscriber)=>subscriber(data));
        return data;
    };
    const addToast = (data)=>{
        if (toasts.length >= attrs.max) {
            toastQueue.push(data);
            return;
        }
        publish(data);
        toasts.unshift(data);
    };
    const processQueue = ()=>{
        while(toastQueue.length > 0 && toasts.length < attrs.max){
            const nextToast = toastQueue.shift();
            if (nextToast) {
                publish(nextToast);
                toasts.unshift(nextToast);
            }
        }
    };
    const create = (data)=>{
        const id = data.id ?? `toast:${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["uuid"])()}`;
        const exists = toasts.find((toast)=>toast.id === id);
        if (dismissedToasts.has(id)) dismissedToasts.delete(id);
        if (exists) {
            toasts = toasts.map((toast)=>{
                if (toast.id === id) {
                    return publish({
                        ...toast,
                        ...data,
                        id
                    });
                }
                return toast;
            });
        } else {
            addToast({
                id,
                duration: attrs.duration,
                removeDelay: attrs.removeDelay,
                type: "info",
                ...data,
                stacked: !attrs.overlap,
                gap: attrs.gap
            });
        }
        return id;
    };
    const remove = (id)=>{
        dismissedToasts.add(id);
        if (!id) {
            toasts.forEach((toast)=>{
                subscribers.forEach((subscriber)=>subscriber({
                        id: toast.id,
                        dismiss: true
                    }));
            });
            toasts = [];
            toastQueue = [];
        } else {
            subscribers.forEach((subscriber)=>subscriber({
                    id,
                    dismiss: true
                }));
            toasts = toasts.filter((toast)=>toast.id !== id);
            processQueue();
        }
        return id;
    };
    const error = (data)=>{
        return create({
            ...data,
            type: "error"
        });
    };
    const success = (data)=>{
        return create({
            ...data,
            type: "success"
        });
    };
    const info = (data)=>{
        return create({
            ...data,
            type: "info"
        });
    };
    const warning = (data)=>{
        return create({
            ...data,
            type: "warning"
        });
    };
    const loading = (data)=>{
        return create({
            ...data,
            type: "loading"
        });
    };
    const getVisibleToasts = ()=>{
        return toasts.filter((toast)=>!dismissedToasts.has(toast.id));
    };
    const getCount = ()=>{
        return toasts.length;
    };
    const promise = (promise2, options, shared = {})=>{
        if (!options || !options.loading) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["warn"])("[zag-js > toast] toaster.promise() requires at least a 'loading' option to be specified");
            return;
        }
        const id = create({
            ...shared,
            ...options.loading,
            promise: promise2,
            type: "loading"
        });
        let removable = true;
        let result;
        const prom = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["runIfFn"])(promise2).then(async (response)=>{
            result = [
                "resolve",
                response
            ];
            if (isHttpResponse(response) && !response.ok) {
                removable = false;
                const errorOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["runIfFn"])(options.error, `HTTP Error! status: ${response.status}`);
                create({
                    ...shared,
                    ...errorOptions,
                    id,
                    type: "error"
                });
            } else if (options.success !== void 0) {
                removable = false;
                const successOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["runIfFn"])(options.success, response);
                create({
                    ...shared,
                    ...successOptions,
                    id,
                    type: "success"
                });
            }
        }).catch(async (error2)=>{
            result = [
                "reject",
                error2
            ];
            if (options.error !== void 0) {
                removable = false;
                const errorOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["runIfFn"])(options.error, error2);
                create({
                    ...shared,
                    ...errorOptions,
                    id,
                    type: "error"
                });
            }
        }).finally(()=>{
            if (removable) {
                remove(id);
            }
            options.finally?.();
        });
        const unwrap = ()=>new Promise((resolve, reject)=>prom.then(()=>result[0] === "reject" ? reject(result[1]) : resolve(result[1])).catch(reject));
        return {
            id,
            unwrap
        };
    };
    const update = (id, data)=>{
        return create({
            id,
            ...data
        });
    };
    const pause = (id)=>{
        if (id != null) {
            toasts = toasts.map((toast)=>{
                if (toast.id === id) return publish({
                    ...toast,
                    message: "PAUSE"
                });
                return toast;
            });
        } else {
            toasts = toasts.map((toast)=>publish({
                    ...toast,
                    message: "PAUSE"
                }));
        }
    };
    const resume = (id)=>{
        if (id != null) {
            toasts = toasts.map((toast)=>{
                if (toast.id === id) return publish({
                    ...toast,
                    message: "RESUME"
                });
                return toast;
            });
        } else {
            toasts = toasts.map((toast)=>publish({
                    ...toast,
                    message: "RESUME"
                }));
        }
    };
    const dismiss = (id)=>{
        if (id != null) {
            toasts = toasts.map((toast)=>{
                if (toast.id === id) return publish({
                    ...toast,
                    message: "DISMISS"
                });
                return toast;
            });
        } else {
            toasts = toasts.map((toast)=>publish({
                    ...toast,
                    message: "DISMISS"
                }));
        }
    };
    const isVisible = (id)=>{
        return !dismissedToasts.has(id) && !!toasts.find((toast)=>toast.id === id);
    };
    const isDismissed = (id)=>{
        return dismissedToasts.has(id);
    };
    const expand = ()=>{
        toasts = toasts.map((toast)=>publish({
                ...toast,
                stacked: true
            }));
    };
    const collapse = ()=>{
        toasts = toasts.map((toast)=>publish({
                ...toast,
                stacked: false
            }));
    };
    return {
        attrs,
        subscribe,
        create,
        update,
        remove,
        dismiss,
        error,
        success,
        info,
        warning,
        loading,
        getVisibleToasts,
        getCount,
        promise,
        pause,
        resume,
        isVisible,
        isDismissed,
        expand,
        collapse
    };
}
var isHttpResponse = (data)=>{
    return data && typeof data === "object" && "ok" in data && typeof data.ok === "boolean" && "status" in data && typeof data.status === "number";
};
// src/index.ts
var group = {
    connect: groupConnect,
    machine: groupMachine
};
;
}),
"[project]/node_modules/@zag-js/toggle/dist/index.mjs [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-ssr] (ecmascript)");
;
;
;
;
;
// src/toggle.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createAnatomy"])("toggle", [
    "root",
    "indicator"
]);
var parts = anatomy.build();
function connect(service, normalize) {
    const { context, prop, send } = service;
    const pressed = context.get("pressed");
    return {
        pressed,
        disabled: !!prop("disabled"),
        setPressed (value) {
            send({
                type: "PRESS.SET",
                value
            });
        },
        getRootProps () {
            return normalize.element({
                type: "button",
                ...parts.root.attrs,
                disabled: prop("disabled"),
                "aria-pressed": pressed,
                "data-state": pressed ? "on" : "off",
                "data-pressed": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(pressed),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(prop("disabled")),
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (prop("disabled")) return;
                    send({
                        type: "PRESS.TOGGLE"
                    });
                }
            });
        },
        getIndicatorProps () {
            return normalize.element({
                ...parts.indicator.attrs,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(prop("disabled")),
                "data-pressed": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataAttr"])(pressed),
                "data-state": pressed ? "on" : "off"
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            defaultPressed: false,
            ...props2
        };
    },
    context ({ prop, bindable }) {
        return {
            pressed: bindable(()=>({
                    value: prop("pressed"),
                    defaultValue: prop("defaultPressed"),
                    onChange (value) {
                        prop("onPressedChange")?.(value);
                    }
                }))
        };
    },
    initialState () {
        return "idle";
    },
    on: {
        "PRESS.TOGGLE": {
            actions: [
                "togglePressed"
            ]
        },
        "PRESS.SET": {
            actions: [
                "setPressed"
            ]
        }
    },
    states: {
        idle: {}
    },
    implementations: {
        actions: {
            togglePressed ({ context }) {
                context.set("pressed", !context.get("pressed"));
            },
            setPressed ({ context, event }) {
                context.set("pressed", event.value);
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createProps"])()([
    "defaultPressed",
    "pressed",
    "onPressedChange",
    "disabled"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}),
"[project]/node_modules/@zag-js/color-picker/dist/index.mjs [app-ssr] (ecmascript) <export parse as parseColor>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "parseColor",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$picker$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parse"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$picker$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/color-picker/dist/index.mjs [app-ssr] (ecmascript)");
}),
"[project]/node_modules/@zag-js/highlight-word/dist/index.mjs [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/normalize-span.ts
__turbopack_context__.s([
    "highlightWord",
    ()=>highlightWord
]);
var normalizeSpan = (spans, len)=>{
    const result = [];
    const append = (start, end, match)=>{
        if (end - start > 0) result.push({
            start,
            end,
            match
        });
    };
    if (spans.length === 0) {
        append(0, len, false);
    } else {
        let lastIndex = 0;
        for (const chunk of spans){
            append(lastIndex, chunk.start, false);
            append(chunk.start, chunk.end, true);
            lastIndex = chunk.end;
        }
        append(lastIndex, len, false);
    }
    return result;
};
// src/escape-regex.ts
var escapeRegex = (term)=>term.replace(/[|\\{}()[\]^$+*?.-]/g, (char)=>`\\${char}`);
// src/highlight-first.ts
function highlightFirst(props) {
    const { text, query, ignoreCase, exactMatch } = props;
    if (exactMatch) {
        const escapedQuery = escapeRegex(query);
        const regex = new RegExp(`\\b(${escapedQuery})\\b`, ignoreCase ? "i" : "");
        const match = text.match(regex);
        if (!match || match.index === void 0) {
            return [
                {
                    text,
                    match: false
                }
            ];
        }
        const start2 = match.index;
        const end2 = start2 + match[0].length;
        const spans2 = [
            {
                start: start2,
                end: end2
            }
        ];
        return normalizeSpan(spans2, text.length).map((chunk)=>({
                text: text.slice(chunk.start, chunk.end),
                match: !!chunk.match
            }));
    }
    const searchText = ignoreCase ? text.toLowerCase() : text;
    const searchQuery = ignoreCase ? typeof query === "string" ? query.toLowerCase() : query : query;
    const start = typeof searchText === "string" ? searchText.indexOf(searchQuery) : -1;
    if (start === -1) {
        return [
            {
                text,
                match: false
            }
        ];
    }
    const end = start + searchQuery.length;
    const spans = [
        {
            start,
            end
        }
    ];
    return normalizeSpan(spans, text.length).map((chunk)=>({
            text: text.slice(chunk.start, chunk.end),
            match: !!chunk.match
        }));
}
// src/highlight-multiple.ts
var buildRegex = (queryProp, flags, exactMatch)=>{
    const query = queryProp.filter(Boolean).map((text)=>escapeRegex(text));
    const pattern = exactMatch ? `\\b(${query.join("|")})\\b` : `(${query.join("|")})`;
    return new RegExp(pattern, flags);
};
var getRegexFlags = (ignoreCase, matchAll = true)=>`${ignoreCase ? "i" : ""}${matchAll ? "g" : ""}`;
function highlightMultiple(props) {
    const { text, query, ignoreCase, matchAll, exactMatch } = props;
    if (query.length === 0) {
        return [
            {
                text,
                match: false
            }
        ];
    }
    const flags = getRegexFlags(ignoreCase, matchAll);
    const regex = buildRegex(Array.isArray(query) ? query : [
        query
    ], flags, exactMatch);
    const spans = [
        ...text.matchAll(regex)
    ].map((match)=>({
            start: match.index || 0,
            end: (match.index || 0) + match[0].length
        }));
    return normalizeSpan(spans, props.text.length).map((chunk)=>({
            text: props.text.slice(chunk.start, chunk.end),
            match: !!chunk.match
        }));
}
// src/highlight.ts
var highlightWord = (props)=>{
    if (props.matchAll == null) {
        props.matchAll = Array.isArray(props.query);
    }
    if (!props.matchAll && Array.isArray(props.query)) {
        throw new Error("matchAll must be true when using multiple queries");
    }
    return props.matchAll ? highlightMultiple(props) : highlightFirst(props);
};
;
}),
];

//# sourceMappingURL=node_modules_257fca66._.js.map