{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/perfect/Documents/GitHub/movies-weather-frontend/src/lib/apollo-wrapper.tsx"],"sourcesContent":["'use client';\n\nimport { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri:\n    process.env.NEXT_PUBLIC_GRAPHQL_ENDPOINT || 'http://localhost:4000/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // Get the authentication token from local storage if it exists\n  const token =\n    typeof window !== 'undefined' ? localStorage.getItem('token') : null;\n\n  // Return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      errorPolicy: 'all',\n    },\n    query: {\n      errorPolicy: 'all',\n    },\n  },\n});\n\nexport function ApolloWrapper({ children }: { children: React.ReactNode }) {\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n}\n"],"names":[],"mappings":";;;;AAQI;;AANJ;AAAA;AAAA;AACA;AACA;AAJA;;;;;AAMA,MAAM,WAAW,IAAA,mLAAc,EAAC;IAC9B,KACE,2KAAO,CAAC,GAAG,CAAC,4BAA4B,IAAI;AAChD;AAEA,MAAM,WAAW,IAAA,+KAAU,EAAC,CAAC;QAAG,EAAE,OAAO,EAAE;IACzC,+DAA+D;IAC/D,MAAM,QACJ,uCAAgC,aAAa,OAAO,CAAC,WAAW;IAElE,8DAA8D;IAC9D,OAAO;QACL,SAAS;YACP,GAAG,OAAO;YACV,eAAe,QAAQ,AAAC,UAAe,OAAN,SAAU;QAC7C;IACF;AACF;AAEA,MAAM,SAAS,IAAI,6KAAY,CAAC;IAC9B,MAAM,SAAS,MAAM,CAAC;IACtB,OAAO,IAAI,4LAAa;IACxB,gBAAgB;QACd,YAAY;YACV,aAAa;QACf;QACA,OAAO;YACL,aAAa;QACf;IACF;AACF;AAEO,SAAS,cAAc,KAA2C;QAA3C,EAAE,QAAQ,EAAiC,GAA3C;IAC5B,qBAAO,6LAAC,6LAAc;QAAC,QAAQ;kBAAS;;;;;;AAC1C;KAFgB","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/perfect/Documents/GitHub/movies-weather-frontend/src/lib/auth-provider.tsx"],"sourcesContent":["'use client';\n\nimport { SessionProvider } from 'next-auth/react';\nimport { ReactNode } from 'react';\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  return <SessionProvider>{children}</SessionProvider>;\n}\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AASO,SAAS,aAAa,KAA+B;QAA/B,EAAE,QAAQ,EAAqB,GAA/B;IAC3B,qBAAO,6LAAC,oKAAe;kBAAE;;;;;;AAC3B;KAFgB","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///home/perfect/Documents/GitHub/movies-weather-frontend/src/lib/theme.tsx"],"sourcesContent":["'use client';\n\nimport { ChakraProvider, defaultSystem, defineConfig } from '@chakra-ui/react';\nimport { ReactNode } from 'react';\n\n// Configuration du thème avec support des modes clair et sombre\nconst config = defineConfig({\n  initialColorMode: 'light',\n  useSystemColorMode: false,\n  cssVarPrefix: 'chakra',\n});\n\n// Créer un système personnalisé avec la configuration\nconst customSystem = {\n  ...defaultSystem,\n  config,\n};\n\nexport const ChakraProviderWrapper = ({ children }: { children: ReactNode }) => {\n  return <ChakraProvider value={customSystem}>{children}</ChakraProvider>;\n};\n"],"names":[],"mappings":";;;;;AAEA;AAAA;AAAA;AAFA;;;AAKA,gEAAgE;AAChE,MAAM,SAAS,IAAA,uNAAY,EAAC;IAC1B,kBAAkB;IAClB,oBAAoB;IACpB,cAAc;AAChB;AAEA,sDAAsD;AACtD,MAAM,eAAe;IACnB,GAAG,oLAAa;IAChB;AACF;AAEO,MAAM,wBAAwB;QAAC,EAAE,QAAQ,EAA2B;IACzE,qBAAO,6LAAC,2MAAc;QAAC,OAAO;kBAAe;;;;;;AAC/C;KAFa","debugId":null}}]
}